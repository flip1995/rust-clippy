if_chain! {
    if let ExprKind::Block(ref block, ref label) = expr.kind;
    if block.stmts.len() == 3;
    if let StmtKind::Local(ref local) = block.stmts[0].kind;
    if let Some(ref init) = local.init;
    if let ExprKind::Lit(ref lit) = init.kind;
    if let LitKind::Int(42, LitIntType::Signed(IntTy::I32)) = lit.node;
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;
    if name.as_str() == "x";
    if let StmtKind::Local(ref local1) = block.stmts[1].kind;
    if let Some(ref init1) = local1.init;
    if let ExprKind::Lit(ref lit1) = init1.kind;
    if let LitKind::Float(_, LitFloatType::Suffixed(FloatTy::F32)) = lit1.node;
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.kind;
    if name1.as_str() == "_t";
    if let StmtKind::Semi(ref e, _) = block.stmts[2].kind
    if let ExprKind::Unary(UnOp::Neg, ref inner) = e.kind;
    if let ExprKind::Path(ref path) = inner.kind;
    if match_qpath(path, &["x"]);
    if block.expr.is_none();
    then {
        // report your lint here
    }
}
if_chain! {
    if let ExprKind::Block(ref block, ref label) = expr.kind;
    if block.stmts.len() == 1;
    if let StmtKind::Local(ref local) = block.stmts[0].kind;
    if let Some(ref init) = local.init;
    if let ExprKind::Call(ref func, ref args) = init.kind;
    if let ExprKind::Path(ref path) = func.kind;
    if match_qpath(path, &["String", "new"]);
    if args.len() == 0;
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;
    if name.as_str() == "expr";
    if let Some(trailing_expr) = &block.expr;
    if let ExprKind::Call(ref func1, ref args1) = trailing_expr.kind;
    if let ExprKind::Path(ref path1) = func1.kind;
    if match_qpath(path1, &["drop"]);
    if args1.len() == 1;
    if let ExprKind::Path(ref path2) = args1[0].kind;
    if match_qpath(path2, &["expr"]);
    then {
        // report your lint here
    }
}
if_chain! {
    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl, ref body_id, _, None) = expr.kind
    if let FnRetTy::DefaultReturn(_) = fn_decl.output
    let body = cx.tcx.hir().body(body_id);
    if let ExprKind::Call(ref func, ref args) = body.value.kind;
    if let ExprKind::Path(ref path) = func.kind;
    if matches!(path, QPath::LangItem(LangItem::FromGenerator, _));
    if args.len() == 1;
    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl1, ref body_id1, _, Some(Movability::Static)) = args[0].kind
    if let FnRetTy::DefaultReturn(_) = fn_decl1.output
    let body1 = cx.tcx.hir().body(body_id1);
    if let ExprKind::Block(ref block, ref label) = body1.value.kind;
    if block.stmts.len() == 0;
    if block.expr.is_none();
    then {
        // report your lint here
    }
}
